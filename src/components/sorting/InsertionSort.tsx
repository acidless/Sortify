import {useContext, useEffect, useReducer, useRef} from "react";
import {insertionSort, type InsertionSortAction} from "../../algorithms/insertionSort.ts";
import SortingAlgorithm from "./SortingAlgorithm.tsx";
import {TheoryContext} from "../../TheoryContext.ts";
import Tabs from "../Tabs.tsx";

type State = {
    pivotIndex: number | undefined,
    checkingIndex: number | undefined
};

const initialState: State = {
    pivotIndex: undefined,
    checkingIndex: undefined
};

type Action =
    { type: "SET_PIVOT_INDEX", payload: number | undefined } |
    { type: "SET_CHECKING_INDEX", payload: number | undefined };

function reducer(state: State, action: Action): State {
    switch (action.type) {
        case "SET_PIVOT_INDEX":
            return {...state, pivotIndex: action.payload};
        case "SET_CHECKING_INDEX":
            return {...state, checkingIndex: action.payload};
    }
}

function InsertionSortTheory() {
    return <>
        <h3 className="mb-2">üìå –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—Å—Ç–∞–≤–∫–∞–º–∏ (Insertion Sort)</h3>
        <p className="mb-6 text-base font-light leading-6">
            –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—Å—Ç–∞–≤–∫–∞–º–∏ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç—Ä–æ–∏—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ.
            –û–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –º–∞—Å—Å–∏–≤—É, –±–µ—Ä—è –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –∑–∞ —Ä–∞–∑ –∏ –≤—Å—Ç–∞–≤–ª—è—è –µ–≥–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ <span
            className="text-green-400">—É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π </span>
            —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞.
            –ê–ª–≥–æ—Ä–∏—Ç–º –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Å–ø–æ—Å–æ–±, –∫–æ—Ç–æ—Ä—ã–º –ª—é–¥–∏ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç –∫–∞—Ä—Ç–æ—á–∫–∏: –±–µ—Ä—è –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É, –æ–Ω–∏ –≤—Å—Ç–∞–≤–ª—è—é—Ç –µ—ë –≤ –Ω—É–∂–Ω–æ–µ
            –º–µ—Å—Ç–æ —Å—Ä–µ–¥–∏ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫.
        </p>

        <h4 className="mb-2 text-lg font-semibold">üëç –ü–ª—é—Å—ã –∏ üëé –ú–∏–Ω—É—Å—ã</h4>
        <ul className="list-disc list-inside text-base font-light leading-6">
            <li>–ü—Ä–æ—Å—Ç–∞—è –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è.</li>
            <li>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –ø–æ—á—Ç–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤ (–ø–æ—á—Ç–∏ O(n)).</li>
            <li className="text-red-400">–ú–µ–¥–ª–µ–Ω–Ω–∞—è –Ω–∞ –±–æ–ª—å—à–∏—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –º–∞—Å—Å–∏–≤–∞—Ö (O(n¬≤)).</li>
            <li className="text-red-400">–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö.</li>
        </ul>
    </>
}

function InsertionSortAsymptotics() {
    return <>
        <h3 className="mb-2">‚è± –°–ª–æ–∂–Ω–æ—Å—Ç—å</h3>
        <table className="mb-2 text-base font-light leading-6 text-left border-collapse">
            <thead>
            <tr>
                <th className="border-neutral-700 border-1 p-2">–°–ª—É—á–∞–π</th>
                <th className="border-neutral-700 border-1 p-2">–í—Ä–µ–º—è</th>
            </tr>
            </thead>
            <tbody>
            <tr className="bg-green-900/40">
                <td className="border-neutral-700 border-1 p-2">–õ—É—á—à–∏–π (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤)</td>
                <td className="border-neutral-700 border-1 p-2">O(n)</td>
            </tr>
            <tr className="bg-yellow-900/40">
                <td className="border-neutral-700 border-1 p-2">–°—Ä–µ–¥–Ω–∏–π</td>
                <td className="border-neutral-700 border-1 p-2">O(n¬≤)</td>
            </tr>
            <tr className="bg-red-900/40">
                <td className="border-neutral-700 border-1 p-2">–•—É–¥—à–∏–π</td>
                <td className="border-neutral-700 border-1 p-2">O(n¬≤)</td>
            </tr>
            </tbody>
        </table>
        <p className="mb-6 text-base font-light leading-6">–ü–∞–º—è—Ç—å: O(1)</p>
    </>
}

function InsertionSortAlgorithm() {
    return <>
        <h3 className="mb-2">üß† –ü–æ—à–∞–≥–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ</h3>
        <ol className="list-decimal list-inside mb-6 text-base font-light leading-6">
            <li>2Ô∏è‚É£ –ù–∞—á–∏–Ω–∞–µ–º —Å –≤—Ç–æ—Ä–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º).</li>
            <li>üîé –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞.</li>
            <li>‚û°Ô∏è –°–¥–≤–∏–≥–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ, –≤–ø—Ä–∞–≤–æ, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏.</li>
            <li>‚¨áÔ∏è –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞.</li>
            <li>üîÅ –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ.</li>
        </ol>

        <h4 className="mb-2">üìÑ –ü—Å–µ–≤–¥–æ–∫–æ–¥</h4>
        <pre className="bg-gray-900 p-4 rounded-md text-sm font-light mb-4">
      <code>
        {`procedure insertionSort(A)
    n = len(A)
    for i = 1 to n - 1 do
        key = A[i]
        j = i - 1
        while j >= 0 and A[j] > key do
            A[j + 1] = A[j]
            j = j - 1
        A[j + 1] = key
end procedure`}
      </code>
    </pre>
    </>
}

function InsertionSortText() {
    return <Tabs tabs={[{content: InsertionSortTheory(), name: "–¢–µ–æ—Ä–∏—è"}, {
        content: InsertionSortAsymptotics(),
        name: "–°–ª–æ–∂–Ω–æ—Å—Ç—å"
    }, {content: InsertionSortAlgorithm(), name: "–®–∞–≥–∏"}]}>
    </Tabs>
}

function InsertionSort() {
    const {setTheory} = useContext(TheoryContext);
    const [state, dispatch] = useReducer(reducer, initialState);
    const stateRef = useRef<State>(state);

    useEffect(() => {
        stateRef.current = state;
    }, [state]);

    useEffect(() => {
        setTheory(<InsertionSortText/>);
    }, []);


    function makeSnapshot() {
        return {
            pivotIndex: stateRef.current.pivotIndex,
            checkingIndex: stateRef.current.checkingIndex
        };
    }

    function updateData(next: State) {
        dispatch({type: "SET_PIVOT_INDEX", payload: next.pivotIndex});
        dispatch({type: "SET_CHECKING_INDEX", payload: next.checkingIndex});
    }

    function setAlgorithmState(action: InsertionSortAction) {
        switch (action.type) {
            case "key":
                dispatch({type: "SET_PIVOT_INDEX", payload: action.index});
                dispatch({type: "SET_CHECKING_INDEX", payload: undefined});
                break;
            case "checking":
                dispatch({type: "SET_CHECKING_INDEX", payload: action.checkingIndex});
                break;
            case "insert":
            case "done":
                dispatch({type: "SET_CHECKING_INDEX", payload: undefined});
                dispatch({type: "SET_PIVOT_INDEX", payload: undefined});
                break;
        }
    }

    function nodeClassName(index: number) {
        if (state.pivotIndex === index) return "border-green-400";
        if (state.checkingIndex === index) return "border-yellow-400";
    }

    return <SortingAlgorithm
        name="Insertion Sort"
        algorithm={insertionSort}
        makeSnapshot={makeSnapshot}
        updateData={updateData}
        setAlgorithmState={setAlgorithmState}
        checkingIndices={state.pivotIndex !== undefined && state.checkingIndex !== undefined ? [state.pivotIndex, state.checkingIndex] : undefined}
        classNameFn={nodeClassName}
    />;
}

export default InsertionSort;