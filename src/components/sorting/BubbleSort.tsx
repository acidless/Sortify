import {useContext, useEffect, useRef, useState} from "react";
import {bubbleSort, type BubbleSortAction} from "../../algorithms/bubbleSort.ts";
import SortingAlgorithm from "./SortingAlgorithm.tsx";
import { TheoryContext } from "../../TheoryContext.ts";

function BubbleSortTheory() {
    return <>
        <h3 className="mb-6">üìå –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—É–∑—ã—Ä—å–∫–æ–º (Bubble Sort)</h3>

        <h4 className="mb-2">üí° –ò–¥–µ—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞</h4>
        <p className="mb-6 text-base font-light leading-6">
            –ü—É–∑—ã—Ä—å–∫–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —Å–ø–∏—Å–∫—É,
            —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å–æ—Å–µ–¥–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –º–µ–Ω—è–µ—Ç –∏—Ö –º–µ—Å—Ç–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å—Ç–æ—è—Ç –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
            –ù–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ "–≤—Å–ø–ª—ã–≤–∞–µ—Ç" (–ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞) —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ‚Äî
            –∫–∞–∫ –ø—É–∑—ã—Ä—ë–∫ –≤ –≤–æ–¥–µ.
        </p>

        <h4 className="mb-2">‚è± –°–ª–æ–∂–Ω–æ—Å—Ç—å</h4>
        <table className="mb-2 text-base font-light leading-6 text-left border-collapse">
            <thead>
            <tr>
                <th className="border-neutral-700 border-1 p-2">–°–ª—É—á–∞–π</th>
                <th className="border-neutral-700 border-1 p-2">–í—Ä–µ–º—è</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td className="border-neutral-700 border-1 p-2">–•—É–¥—à–∏–π</td>
                <td className="border-neutral-700 border-1 p-2">O(n¬≤)</td>
            </tr>
            <tr>
                <td className="border-neutral-700 border-1 p-2">–°—Ä–µ–¥–Ω–∏–π</td>
                <td className="border-neutral-700 border-1 p-2">O(n¬≤)</td>
            </tr>
            <tr>
                <td className="border-neutral-700 border-1 p-2">–õ—É—á—à–∏–π (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤)</td>
                <td className="border-neutral-700 border-1 p-2">O(n)</td>
            </tr>
            </tbody>
        </table>
        <p className="mb-6 text-base font-light leading-6">–ü–∞–º—è—Ç—å: O(1)</p>

        <h4 className="mb-2">üß† –ü–æ—à–∞–≥–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ</h4>
        <ol className="list-decimal list-inside mb-6 text-base font-light leading-6">
            <li>–ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –º–∞—Å—Å–∏–≤—É —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ.</li>
            <li>–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å —Å–ª–µ–¥—É—é—â–∏–º.</li>
            <li>–ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –±–æ–ª—å—à–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ ‚Äî –º–µ–Ω—è–µ–º –∏—Ö –º–µ—Å—Ç–∞–º–∏.</li>
            <li>–ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–∞ —Å–≤–æ—ë–º –º–µ—Å—Ç–µ.</li>
            <li>–ü–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è –æ—Å—Ç–∞–≤—à–µ–π—Å—è —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞ (–Ω–µ –≤–∫–ª—é—á–∞—è —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Ü–µ).</li>
            <li>–ï—Å–ª–∏ –∑–∞ –ø—Ä–æ—Ö–æ–¥ –Ω–µ –±—ã–ª–æ –æ–±–º–µ–Ω–æ–≤ ‚Äî –º–∞—Å—Å–∏–≤ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è).</li>
        </ol>

        <h4 className="mb-2">üìÑ –ü—Å–µ–≤–¥–æ–∫–æ–¥</h4>
        <pre className="bg-gray-900 p-4 rounded-md text-sm font-light mb-4">
              <code>
                {`procedure bubbleSort(A)
    n = len(A)
    repeat
        swapped = false
        for i = 0 to n - 2 do
            if A[i] > A[i + 1] then
                swap A[i] and A[i + 1]
                swapped = true
        n = n - 1
    until not swapped
end procedure`}
              </code>
            </pre>
    </>
}

function BubbleSort() {
    const {setTheory} = useContext(TheoryContext);
    const [checkingIndices, setCheckingIndices] = useState<number[] | undefined>();
    const checkingIndicesRef = useRef<number[] | undefined>(checkingIndices);

    useEffect(() => {
        setTheory(<BubbleSortTheory/>);
    }, [checkingIndices]);

    function makeSnapshot() {
        return {
            checkingIndices: checkingIndicesRef.current
        };
    }

    function updateCheckingIndices(newCheckingIndices: number[] | undefined) {
        setCheckingIndices(newCheckingIndices);
        checkingIndicesRef.current = newCheckingIndices;
    }

    function updateData(next: any) {
        updateCheckingIndices(next.checkingIndices);
    }

    function setAlgorithmState(action: BubbleSortAction) {
        switch (action.type) {
            case "compare":
                updateCheckingIndices(action.indices);
                break;
            case "swap":
                updateCheckingIndices(undefined);
                break;
            case "done":
                updateCheckingIndices(undefined);
                break;
        }
    }

    function nodeClassName(index: number) {
        return checkingIndices?.includes(index) ? "border-green-400" : undefined;
    }

    return <SortingAlgorithm
        name="Bubble Sort"
        algorithm={bubbleSort}
        makeSnapshot={makeSnapshot}
        updateData={updateData}
        setAlgorithmState={setAlgorithmState}
        checkingIndices={checkingIndices}
        classNameFn={nodeClassName}
    />;
}

export default BubbleSort;