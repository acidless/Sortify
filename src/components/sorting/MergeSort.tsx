import {useContext, useEffect, useReducer, useRef} from "react";
import SortingAlgorithm from "./SortingAlgorithm.tsx";
import {mergeSort, type MergeSortAction} from "../../algorithms/mergeSort.ts";
import type {SampleArray} from "../../types.ts";
import { TheoryContext } from "../../TheoryContext.ts";

type State = {
    leftPart: SampleArray | undefined;
    rightPart: SampleArray | undefined;
    checkingIndices: number[] | undefined;
    overwriteIndex: number | undefined;
};

const initialState: State = {
    leftPart: undefined,
    rightPart: undefined,
    checkingIndices: undefined,
    overwriteIndex: undefined
};

type Action =
    { type: "SET_LEFT_PART", payload: SampleArray | undefined } |
    { type: "SET_RIGHT_PART", payload: SampleArray | undefined } |
    { type: "SET_CHECKING_INDICES", payload: number[] | undefined } |
    { type: "SET_OVERWRITE_INDEX", payload: number | undefined };

function reducer(state: State, action: Action): State {
    switch (action.type) {
        case "SET_LEFT_PART":
            return {...state, leftPart: action.payload};
        case "SET_RIGHT_PART":
            return {...state, rightPart: action.payload};
        case "SET_CHECKING_INDICES":
            return {...state, checkingIndices: action.payload};
        case "SET_OVERWRITE_INDEX":
            return {...state, overwriteIndex: action.payload};
    }
}

function MergeSortTheory() {
    return <>
        <h3 className="mb-6">üìå –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º (Merge Sort)</h3>

        <h4 className="mb-2">üí° –ò–¥–µ—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞</h4>
        <p className="mb-6 text-base font-light leading-6">
            –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º ‚Äî —ç—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ "—Ä–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π".
            –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–µ–ª–∏—Ç –º–∞—Å—Å–∏–≤ –Ω–∞ –¥–≤–µ –ø–æ–ª–æ–≤–∏–Ω—ã, —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞–∂–¥—É—é –ø–æ–ª–æ–≤–∏–Ω—É, –∞ –∑–∞—Ç–µ–º –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç (—Å–ª–∏–≤–∞–µ—Ç) –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª–æ–≤–∏–Ω—ã –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤.
            –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫–Ω–∏–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: —Å–Ω–∞—á–∞–ª–∞ –≤—ã –¥–µ–ª–∏—Ç–µ –∫–Ω–∏–≥–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã, —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç–µ –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É, –∞ –∑–∞—Ç–µ–º –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç–µ –∏—Ö –≤ –æ–¥–Ω—É —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é.
        </p>

        <h4 className="mb-2">‚è± –°–ª–æ–∂–Ω–æ—Å—Ç—å</h4>
        <table className="mb-2 text-base font-light leading-6 text-left border-collapse">
            <thead>
            <tr>
                <th className="border-neutral-700 border-1 p-2">–°–ª—É—á–∞–π</th>
                <th className="border-neutral-700 border-1 p-2">–í—Ä–µ–º—è</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td className="border-neutral-700 border-1 p-2">–•—É–¥—à–∏–π</td>
                <td className="border-neutral-700 border-1 p-2">O(n*logn)</td>
            </tr>
            <tr>
                <td className="border-neutral-700 border-1 p-2">–°—Ä–µ–¥–Ω–∏–π</td>
                <td className="border-neutral-700 border-1 p-2">O(n*logn)</td>
            </tr>
            <tr>
                <td className="border-neutral-700 border-1 p-2">–õ—É—á—à–∏–π (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤)</td>
                <td className="border-neutral-700 border-1 p-2">O(n*logn)</td>
            </tr>
            </tbody>
        </table>
        <p className="mb-6 text-base font-light leading-6">–ü–∞–º—è—Ç—å: O(n)</p>

        <h4 className="mb-2">üß† –ü–æ—à–∞–≥–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ</h4>
        <ol className="list-decimal list-inside mb-6 text-base font-light leading-6">
            <li>–ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–∏–Ω –∏–ª–∏ –Ω–æ–ª—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –æ–Ω —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.</li>
            <li>–†–∞–∑–¥–µ–ª–∏—Ç–µ –º–∞—Å—Å–∏–≤ –Ω–∞ –¥–≤–µ —Ä–∞–≤–Ω—ã–µ —á–∞—Å—Ç–∏.</li>
            <li>–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–∞–∂–¥—É—é –ø–æ–ª–æ–≤–∏–Ω—É.</li>
            <li>–û–±—ä–µ–¥–∏–Ω–∏—Ç–µ (—Å–ª–µ–π—Ç–µ) –¥–≤–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª–æ–≤–∏–Ω—ã –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤.</li>
        </ol>

        <h4 className="mb-2">üìÑ –ü—Å–µ–≤–¥–æ–∫–æ–¥</h4>
        <pre className="bg-gray-900 p-4 rounded-md text-sm font-light mb-4">
      <code>
        {`procedure mergeSort(A)
    if len(A) <= 1 then
        return A
    mid = len(A) / 2
    left = mergeSort(A[0:mid])
    right = mergeSort(A[mid:len(A)])
    return merge(left, right)

procedure merge(left, right)
    result = []
    while !left.empty() 
        and !right.empty() do
        
        if left[0] <= right[0] then
            append left[0] to result
            remove left[0] from left
        else
            append right[0] to result
            remove right[0] from right
            
    while !left.empty() do
        append left[0] to result
        remove left[0] from left
        
    while !right.empty() do
        append right[0] to result
        remove right[0] from right
    return result
end procedure`}
      </code>
    </pre>
    </>
}

function MergeSort() {
    const {setTheory} = useContext(TheoryContext);
    const [state, dispatch] = useReducer(reducer, initialState);
    const stateRef = useRef<State>(state);

    useEffect(() => {
        stateRef.current = state;
    }, [state]);

    useEffect(() => {
        setTheory(<MergeSortTheory/>);
    }, []);

    function makeSnapshot() {
        return {
            checkingIndices: stateRef.current.checkingIndices,
            leftPart: stateRef.current.leftPart,
            rightPart: stateRef.current.rightPart
        };
    }

    function updateData(next: any) {
        dispatch({type: "SET_LEFT_PART", payload: next.leftPart});
        dispatch({type: "SET_RIGHT_PART", payload: next.rightPart});
        dispatch({type: "SET_CHECKING_INDICES", payload: next.indices});
        dispatch({type: "SET_OVERWRITE_INDEX", payload: next.index});
    }

    function setAlgorithmState(action: MergeSortAction) {
        switch (action.type) {
            case "slice":
                dispatch({type: "SET_LEFT_PART", payload: action.left});
                dispatch({type: "SET_RIGHT_PART", payload: action.right});
                dispatch({type: "SET_CHECKING_INDICES", payload: undefined});
                dispatch({type: "SET_OVERWRITE_INDEX", payload: undefined});
                break;
            case "compare":
                dispatch({type: "SET_CHECKING_INDICES", payload: action.indices});
                dispatch({type: "SET_OVERWRITE_INDEX", payload: undefined});
                break;
            case "overwrite":
                dispatch({type: "SET_CHECKING_INDICES", payload: undefined});
                dispatch({type: "SET_OVERWRITE_INDEX", payload: action.index});
                break;
            case "done":
                dispatch({type: "SET_CHECKING_INDICES", payload: undefined});
                dispatch({type: "SET_OVERWRITE_INDEX", payload: undefined});
                break;
        }
    }

    function nodeClassName(index: number, key: number) {
        if (index === state.overwriteIndex) return "border-green-400";
        if (state.checkingIndices?.includes(index)) return "border-yellow-400";
        if (state.leftPart?.filter(item => item.key === key).length) return "border-blue-400";
        if (state.rightPart?.filter(item => item.key === key).length) return "border-orange-400";
    }

    return <SortingAlgorithm
        name="Merge Sort"
        algorithm={mergeSort}
        makeSnapshot={makeSnapshot}
        updateData={updateData}
        setAlgorithmState={setAlgorithmState}
        checkingIndices={state.checkingIndices}
        classNameFn={nodeClassName}
    ></SortingAlgorithm>;
}

export default MergeSort;