import {useContext, useEffect, useReducer, useRef} from "react";
import SortingAlgorithm from "./SortingAlgorithm.tsx";
import {quickSort, type QuickSortAction} from "../../algorithms/quickSort.ts";
import type {SampleArray} from "../../types.ts";
import { TheoryContext } from "../../TheoryContext.ts";

type State = {
    pivotIndex: number | undefined;
    leftPart: SampleArray | undefined;
    rightPart: SampleArray | undefined;
    checkingIndices: number[] | undefined;
    swapIndices: number[] | undefined;
};

const initialState: State = {
    pivotIndex: undefined,
    leftPart: undefined,
    rightPart: undefined,
    checkingIndices: undefined,
    swapIndices: undefined
};

type Action =
    | { type: "SET_PIVOT", payload: number | undefined }
    | { type: "SET_LEFT", payload: SampleArray | undefined }
    | { type: "SET_RIGHT", payload: SampleArray | undefined }
    | { type: "SET_CHECKING", payload: number[] | undefined }
    | { type: "SET_SWAP", payload: number[] | undefined };

function reducer(state: State, action: Action): State {
    switch (action.type) {
        case "SET_PIVOT":
            return {...state, pivotIndex: action.payload};
        case "SET_LEFT":
            return {...state, leftPart: action.payload};
        case "SET_RIGHT":
            return {...state, rightPart: action.payload};
        case "SET_CHECKING":
            return {...state, checkingIndices: action.payload};
        case "SET_SWAP":
            return {...state, swapIndices: action.payload};
        default:
            return state;
    }
}

function QuickSortTheory() {
    return <>
        <h3 className="mb-6">üìå –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (Quick Sort)</h3>

        <h4 className="mb-2">üí° –ò–¥–µ—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞</h4>
        <p className="mb-6 text-base font-light leading-6">
            –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ‚Äî —ç—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–π —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ "—Ä–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π".
            –ê–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø–æ—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (pivot) –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∏ —Ä–∞–∑–¥–µ–ª—è–µ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –¥–≤–µ –≥—Ä—É–ø–ø—ã: —ç–ª–µ–º–µ–Ω—Ç—ã, –º–µ–Ω—å—à–∏–µ –æ–ø–æ—Ä–Ω–æ–≥–æ, –∏ —ç–ª–µ–º–µ–Ω—Ç—ã, –±–æ–ª—å—à–∏–µ –æ–ø–æ—Ä–Ω–æ–≥–æ.
            –ó–∞—Ç–µ–º –æ–Ω —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±–µ –≥—Ä—É–ø–ø—ã. –≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –ø–æ–∫–∞ –º–∞—Å—Å–∏–≤ –Ω–µ –±—É–¥–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.
            –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —á–∞—Å—Ç–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è —Å –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫–∞—Ä—Ç: –≤—ã –±–µ—Ä–µ—Ç–µ –æ–¥–Ω—É –∫–∞—Ä—Ç—É (–æ–ø–æ—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç) –∏ –¥–µ–ª–∏—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –Ω–∞ –¥–≤–µ –≥—Ä—É–ø–ø—ã ‚Äî —Ç–µ, —á—Ç–æ –º–µ–Ω—å—à–µ, –∏ —Ç–µ, —á—Ç–æ –±–æ–ª—å—à–µ.
        </p>

        <h4 className="mb-2">‚è± –°–ª–æ–∂–Ω–æ—Å—Ç—å</h4>
        <table className="mb-2 text-base font-light leading-6 text-left border-collapse">
            <thead>
            <tr>
                <th className="border-neutral-700 border-1 p-2">–°–ª—É—á–∞–π</th>
                <th className="border-neutral-700 border-1 p-2">–í—Ä–µ–º—è</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td className="border-neutral-700 border-1 p-2">–•—É–¥—à–∏–π</td>
                <td className="border-neutral-700 border-1 p-2">O(n¬≤)</td>
            </tr>
            <tr>
                <td className="border-neutral-700 border-1 p-2">–°—Ä–µ–¥–Ω–∏–π</td>
                <td className="border-neutral-700 border-1 p-2">O(n*logn)</td>
            </tr>
            <tr>
                <td className="border-neutral-700 border-1 p-2">–õ—É—á—à–∏–π (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤)</td>
                <td className="border-neutral-700 border-1 p-2">O(n*logn)</td>
            </tr>
            </tbody>
        </table>
        <p className="mb-6 text-base font-light leading-6">–ü–∞–º—è—Ç—å: O(logn)</p>

        <h4 className="mb-2">üß† –ü–æ—à–∞–≥–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ</h4>
        <ol className="list-decimal list-inside mb-6 text-base font-light leading-6">
            <li>–ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–∏–Ω –∏–ª–∏ –Ω–æ–ª—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –æ–Ω —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.</li>
            <li>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–æ—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞.</li>
            <li>–†–∞–∑–¥–µ–ª–∏—Ç–µ –º–∞—Å—Å–∏–≤ –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏: —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—å—à–µ –æ–ø–æ—Ä–Ω–æ–≥–æ –∏ —ç–ª–µ–º–µ–Ω—Ç—ã –±–æ–ª—å—à–µ –æ–ø–æ—Ä–Ω–æ–≥–æ.</li>
            <li>–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –æ–±–µ —á–∞—Å—Ç–∏.</li>
            <li>–û–±—ä–µ–¥–∏–Ω–∏—Ç–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤.</li>
        </ol>

        <h4 className="mb-2">üìÑ –ü—Å–µ–≤–¥–æ–∫–æ–¥</h4>
        <pre className="bg-gray-900 p-4 rounded-md text-sm font-light mb-4">
      <code>
        {`procedure quickSort(A, low, high)
    if low >= high then
        return
        
    pivotIndex = partition(A, low, high)
    quickSort(A, low, pivotIndex - 1)
    quickSort(A, pivotIndex + 1, high)

procedure partition(A, low, high)
    pivot = A[high]
    i = low - 1
    for j = low to high - 1 do
        if A[j] < pivot then
            i = i + 1
            swap A[i] with A[j]
    swap A[i + 1] with A[high]
    return i + 1
end procedure`}
      </code>
    </pre>
    </>
}

function QuickSort() {
    const {setTheory} = useContext(TheoryContext);
    const [state, dispatch] = useReducer(reducer, initialState);
    const stateRef = useRef<State>(state);

    useEffect(() => {
        stateRef.current = state;
    }, [state]);

    useEffect(() => {
        setTheory(<QuickSortTheory/>);
    }, []);

    function makeSnapshot() {
        return {
            checkingIndices: stateRef.current.checkingIndices,
            pivotIndex: stateRef.current.pivotIndex,
            leftPart: stateRef.current.leftPart,
            rightPart: stateRef.current.rightPart,
            swapIndices: stateRef.current.swapIndices
        };
    }

    function updateData(next: any) {
        dispatch({type: "SET_LEFT", payload: next.leftPart});
        dispatch({type: "SET_RIGHT", payload: next.rightPart});
        dispatch({type: "SET_CHECKING", payload: next.indices});
        dispatch({type: "SET_PIVOT", payload: next.pivotIndex});
        dispatch({type: "SET_SWAP", payload: next.swapIndices});
    }

    function setAlgorithmState(action: QuickSortAction) {
        switch (action.type) {
            case "partition":
                dispatch({type: "SET_PIVOT", payload: action.pivotIndex});
                dispatch({type: "SET_LEFT", payload: action.left});
                dispatch({type: "SET_RIGHT", payload: action.right});
                dispatch({type: "SET_CHECKING", payload: undefined});
                dispatch({type: "SET_SWAP", payload: undefined});
                break;
            case "compare":
                dispatch({type: "SET_CHECKING", payload: action.indices});
                dispatch({type: "SET_SWAP", payload: undefined});
                break;
            case "swap":
                dispatch({type: "SET_SWAP", payload: action.indices});
                dispatch({type: "SET_CHECKING", payload: undefined});
                break;
            case "done":
                dispatch({type: "SET_PIVOT", payload: undefined});
                dispatch({type: "SET_CHECKING", payload: undefined});
                dispatch({type: "SET_SWAP", payload: undefined});
                break;
        }
    }

    function nodeClassName(index: number, key: number) {
        if (index === state.pivotIndex) return "border-red-400";
        if (state.swapIndices?.includes(index)) return "border-green-400";
        if (state.checkingIndices?.includes(index)) return "border-yellow-400";
        if (state.leftPart?.some(item => item.key === key)) return "border-blue-400";
        if (state.rightPart?.some(item => item.key === key)) return "border-orange-400";
    }

    return <SortingAlgorithm
        name="Quick Sort"
        algorithm={quickSort}
        makeSnapshot={makeSnapshot}
        updateData={updateData}
        setAlgorithmState={setAlgorithmState}
        checkingIndices={state.checkingIndices}
        classNameFn={nodeClassName}
    />;
}

export default QuickSort;
