import {type RefObject, useContext, useEffect} from "react";
import {bstBfs, generateRandomBST} from "../../algorithms/bstUtils.ts";
import {bstDelete} from "../../algorithms/bstDelete.ts";
import BSTAlgorithm from "./BSTAlgorithm.tsx";
import type {BSTOperationAction, BSTOperationState} from "../../hooks/useBSTOperation.ts";
import {TheoryContext} from "../../TheoryContext.ts";
import Tabs from "../Tabs.tsx";

function BSTDeleteTheory() {
    return <>
        <h3 className="mb-2">üìå –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–∏—Å–∫–∞ (Binary Search Tree, BST)</h3>
        <p className="mb-6 text-base font-light leading-6">
            –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–∏—Å–∫–∞ ‚Äî —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —É–∑–ª–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º, –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –¥–µ—Ä–µ–≤–∞.
            –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤ —Ç—Ä–µ—Ö —Å–ª—É—á–∞—è—Ö:
            <ol>
                <li>–£–∑–µ–ª –Ω–µ –∏–º–µ–µ—Ç –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤ <span className="text-green-400">(–ª–∏—Å—Ç–æ–≤–æ–π —É–∑–µ–ª)</span>.</li>
                <li>–£–∑–µ–ª –∏–º–µ–µ—Ç <span className="text-green-400">–æ–¥–Ω–æ–≥–æ</span> –¥–æ—á–µ—Ä–Ω–µ–≥–æ —É–∑–ª–∞.</li>
                <li>–£–∑–µ–ª –∏–º–µ–µ—Ç <span className="text-green-400">–¥–≤—É—Ö</span> –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤.</li>
            </ol>
            –í –∫–∞–∂–¥–æ–º —Å–ª—É—á–∞–µ –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ-—Ä–∞–∑–Ω–æ–º—É, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞.
        </p>

        <h4 className="mb-2 text-lg font-semibold">üëç –ü–ª—é—Å—ã –∏ üëé –ú–∏–Ω—É—Å—ã</h4>
        <ul className="list-disc list-inside text-base font-light leading-6">
            <li>–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö (–º–æ–∂–Ω–æ –Ω–µ —Ç–æ–ª—å–∫–æ –∏—Å–∫–∞—Ç—å –∏ –≤—Å—Ç–∞–≤–ª—è—Ç—å, –Ω–æ –∏ —É–¥–∞–ª—è—Ç—å
                —ç–ª–µ–º–µ–Ω—Ç—ã).
            </li>
            <li>–°–ª–æ–∂–Ω–æ—Å—Ç—å –≤ —Å—Ä–µ–¥–Ω–µ–º O(log n) –ø—Ä–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–µ—Ä–µ–≤–µ.</li>
            <li className="text-red-400">–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–º–µ—Ç–Ω–æ —Å–ª–æ–∂–Ω–µ–µ, —á–µ–º —É –≤—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –ø–æ–∏—Å–∫–∞ (–æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
                —É–∑–ª–∞ —Å –¥–≤—É–º—è –ø–æ—Ç–æ–º–∫–∞–º–∏).
            </li>
            <li className="text-red-400">–í —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ (–≤—ã—Ä–æ–∂–¥–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ) —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(n).</li>
            <li className="text-red-400">–ë–µ–∑ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ —Å–µ—Ä–∏–∏ —É–¥–∞–ª–µ–Ω–∏–π –¥–µ—Ä–µ–≤–æ –º–æ–∂–µ—Ç —Å–∏–ª—å–Ω–æ —Ç–µ—Ä—è—Ç—å
                —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.
            </li>
        </ul>
    </>
}

function BSTDeleteAsymptotics() {
    return <>
        <h3 className="mb-2">‚è± –°–ª–æ–∂–Ω–æ—Å—Ç—å</h3>
        <table className="mb-2 text-base font-light leading-6 text-left border-collapse">
            <thead>
            <tr>
                <th className="border-neutral-700 border-1 p-2">–°–ª—É—á–∞–π</th>
                <th className="border-neutral-700 border-1 p-2">–í—Ä–µ–º—è</th>
            </tr>
            </thead>
            <tbody>
            <tr className="bg-green-900/40">
                <td className="border-neutral-700 border-1 p-2">–õ—É—á—à–∏–π (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤)</td>
                <td className="border-neutral-700 border-1 p-2">O(1)</td>
            </tr>
            <tr className="bg-yellow-900/40">
                <td className="border-neutral-700 border-1 p-2">–°—Ä–µ–¥–Ω–∏–π</td>
                <td className="border-neutral-700 border-1 p-2">O(logn)</td>
            </tr>
            <tr className="bg-red-900/40">
                <td className="border-neutral-700 border-1 p-2">–•—É–¥—à–∏–π</td>
                <td className="border-neutral-700 border-1 p-2">O(h)</td>
            </tr>
            </tbody>
        </table>
        <p className="mb-6 text-base font-light leading-6">–ü–∞–º—è—Ç—å: O(h), –≥–¥–µ h - –≤—ã—Å–æ—Ç–∞ –¥–µ—Ä–µ–≤–∞</p>
    </>
}

function BSTDeleteAlgorithm() {
    return <>
        <h3 className="mb-2">üß† –ü–æ—à–∞–≥–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ</h3>
        <ol className="list-decimal list-inside mb-6 text-base font-light leading-6">
            <li>ü´ö –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É–∑–ª–∞.</li>
            <li>üîé –°—Ä–∞–≤–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞.</li>
            <li>‚¨ÖÔ∏è –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –ª–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ.</li>
            <li>‚û°Ô∏è –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ.</li>
            <li>‚úÖ –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:</li>
            <ol className="list-decimal list-inside mb-6 text-base font-light leading-6">
                <li>‚ùå –ï—Å–ª–∏ —É–∑–µ–ª –Ω–µ –∏–º–µ–µ—Ç –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ.</li>
                <li>üîÉ –ï—Å–ª–∏ —É–∑–µ–ª –∏–º–µ–µ—Ç –æ–¥–Ω–æ–≥–æ –¥–æ—á–µ—Ä–Ω–µ–≥–æ —É–∑–ª–∞, –∑–∞–º–µ–Ω–∏—Ç–µ –µ–≥–æ –Ω–∞ —ç—Ç–æ—Ç –¥–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª.</li>
                <li>üîé –ï—Å–ª–∏ —É–∑–µ–ª –∏–º–µ–µ—Ç –¥–≤—É—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤, –Ω–∞–π–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω—å—à–∏–π —É–∑–µ–ª –≤ –ø—Ä–∞–≤–æ–º –ø–æ–¥–¥–µ—Ä–µ–≤–µ (–∏–ª–∏ –Ω–∞–∏–±–æ–ª—å—à–∏–π –≤
                    –ª–µ–≤–æ–º) –∏ –∑–∞–º–µ–Ω–∏—Ç–µ –∏–º —É–¥–∞–ª—è–µ–º—ã–π —É–∑–µ–ª.
                </li>
            </ol>
            <li>üîÅ –ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ —à–∞–≥–∏ 2-5, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ—Ç–µ —É–∑–µ–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.</li>
        </ol>

        <h4 className="mb-2">üìÑ –ü—Å–µ–≤–¥–æ–∫–æ–¥</h4>
        <pre className="bg-gray-900 p-4 rounded-md text-sm font-light mb-4">
      <code>
        {`procedure deleteBST(node, val)
    if node is null then
        return null
    if val < node.val then
        node.left =
            deleteBST(node.left, val)
    else if val > node.val then
        node.right =
            deleteBST(node.right, val)
    else
        if node.left is null then
            return node.right
        else if node.right is null then
            return node.left
        else
            minNode = findMin(node.right)
            node.val = minNode.val
            node.right =
                deleteBST(
                    node.right,
                    minNode.val)
    return node

procedure findMin(node)
    while node.left is not null do
        node = node.left
    return node

procedure startDeleteBST(root, val)
    return deleteBST(root, val)
end procedure`}
      </code>
    </pre>
    </>
}

function BSTDeleteText() {
    return <Tabs tabs={[{content: BSTDeleteTheory(), name: "–¢–µ–æ—Ä–∏—è"}, {
        content: BSTDeleteAsymptotics(),
        name: "–°–ª–æ–∂–Ω–æ—Å—Ç—å"
    }, {content: BSTDeleteAlgorithm(), name: "–®–∞–≥–∏"}]}>
    </Tabs>
}

function BSTDelete() {
    const {setTheory} = useContext(TheoryContext);

    useEffect(() => {
        setTheory(<BSTDeleteText/>);
    }, []);

    function setAlgorithmState(value: any, dispatch: React.Dispatch<BSTOperationAction>, stateRef: RefObject<BSTOperationState>, makeComparison: (a: number, b: number) => string) {
        switch (value.type) {
            case "compare":
                dispatch({
                    type: "SET_POPUP_TEXT",
                    payload: makeComparison(value.node.value, stateRef.current.targetNumber),
                });
                dispatch({type: "SET_CHECKING_NODE", payload: value.node});
                break;
            case "go-left":
            case "go-right":
                break;
            case "delete-leaf":
                dispatch({type: "SET_POPUP_TEXT", payload: "–£–¥–∞–ª—è–µ–º –ª–∏—Å—Ç"});
                dispatch({type: "SET_RESULT_NODE", payload: value.node});
                break;
            case "delete-single-child":
                dispatch({type: "SET_POPUP_TEXT", payload: "–£–¥–∞–ª—è–µ–º —É–∑–µ–ª —Å –æ–¥–Ω–∏–º —Ä–µ–±—ë–Ω–∫–æ–º"});
                dispatch({type: "SET_RESULT_NODE", payload: value.node});
                break;
            case "replace-with-successor":
                dispatch({type: "SET_POPUP_TEXT", payload: "–ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—Ä–µ–µ–º–Ω–∏–∫–∞"});
                break;
            case "found":
                dispatch({type: "SET_POPUP_TEXT", payload: "–≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω!"});
                dispatch({type: "SET_RESULT_NODE", payload: null});
                dispatch({type: "SET_CHECKING_NODE", payload: null});
                dispatch({type: "SET_BST_NODES", payload: bstBfs(value.node)});
                break;
        }
    }

    return <BSTAlgorithm algo={bstDelete} setAlgorithmState={setAlgorithmState}
                         startBST={bstBfs(generateRandomBST(8, 0, 20))} title="BST Delete"></BSTAlgorithm>
}

export default BSTDelete;