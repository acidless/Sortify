import BSTAlgorithm from "./BSTAlgorithm.tsx";
import type {BSTOperationAction, BSTOperationState} from "../../hooks/useBSTOperation.ts";
import {type RefObject, useContext, useEffect} from "react";
import {bstInsert} from "../../algorithms/bstInsert.ts";
import {TheoryContext} from "../../TheoryContext.ts";

const node = {value: 10, id: crypto.randomUUID(), left: null, right: null};

function BSTInsertTheory() {
    return <>
        <h3 className="mb-6">üìå –í—Å—Ç–∞–≤–∫–∞ –≤ –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø–æ–∏—Å–∫–∞ (Binary Search Tree, BST)</h3>

        <h4 className="mb-2">üí° –ò–¥–µ—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞</h4>
        <p className="mb-6 text-base font-light leading-6">
            –í—Å—Ç–∞–≤–∫–∞ –≤ –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø–æ–∏—Å–∫–∞ ‚Äî —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É–∑–ª–∞ –≤ –¥–µ—Ä–µ–≤–æ —Å —É—á–µ—Ç–æ–º –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤.
            –ù–æ–≤—ã–π —É–∑–µ–ª –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ª–µ–≤–æ–º –ø–æ–¥–¥–µ—Ä–µ–≤–µ –æ—Å—Ç–∞–≤–∞–ª–∏—Å—å –º–µ–Ω—å—à–µ, –∞ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–æ–º –ø–æ–¥–¥–µ—Ä–µ–≤–µ ‚Äî –±–æ–ª—å—à–µ, —á–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–∑–ª–∞.
            –ê–ª–≥–æ—Ä–∏—Ç–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É–∑–ª–∞ –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏–ª–∏ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤–ª–µ–≤–æ –∏–ª–∏ –≤–ø—Ä–∞–≤–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å.
        </p>

        <h4 className="mb-2">‚è± –°–ª–æ–∂–Ω–æ—Å—Ç—å</h4>
        <table className="mb-2 text-base font-light leading-6 text-left border-collapse">
            <thead>
            <tr>
                <th className="border-neutral-700 border-1 p-2">–°–ª—É—á–∞–π</th>
                <th className="border-neutral-700 border-1 p-2">–í—Ä–µ–º—è</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td className="border-neutral-700 border-1 p-2">–•—É–¥—à–∏–π</td>
                <td className="border-neutral-700 border-1 p-2">O(h)</td>
            </tr>
            <tr>
                <td className="border-neutral-700 border-1 p-2">–°—Ä–µ–¥–Ω–∏–π</td>
                <td className="border-neutral-700 border-1 p-2">O(logn)</td>
            </tr>
            <tr>
                <td className="border-neutral-700 border-1 p-2">–õ—É—á—à–∏–π</td>
                <td className="border-neutral-700 border-1 p-2">O(1)</td>
            </tr>
            </tbody>
        </table>
        <p className="mb-6 text-base font-light leading-6">–ü–∞–º—è—Ç—å: O(h)</p>

        <h4 className="mb-2">üß† –ü–æ—à–∞–≥–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ</h4>
        <ol className="list-decimal list-inside mb-6 text-base font-light leading-6">
            <li>–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É–∑–ª–∞.</li>
            <li>–°—Ä–∞–≤–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å, —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞.</li>
            <li>–ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –ª–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ.</li>
            <li>–ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ.</li>
            <li>–ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª ‚Äî null, –≤—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —É–∑–µ–ª –∑–¥–µ—Å—å.</li>
            <li>–ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ —à–∞–≥–∏ 2-5, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏.</li>
        </ol>

        <h4 className="mb-2">üìÑ –ü—Å–µ–≤–¥–æ–∫–æ–¥</h4>
        <pre className="bg-gray-900 p-4 rounded-md text-sm font-light mb-4">
      <code>
        {`procedure insertBST(node, val)
    if node is null then
        return new Node(val)
    if val < node.val then
        node.left = 
            insertBST(node.left, val)
    else if val > node.val then
        node.right = 
            insertBST(node.right, val)
    return node

procedure startInsertBST(root, val)
    return insertBST(root, val)
end procedure`}
      </code>
    </pre>
    </>
}

function BSTInsert() {
    const {setTheory} = useContext(TheoryContext);

    useEffect(() => {
        setTheory(<BSTInsertTheory/>);
    }, []);

    function setAlgorithmState(value: any, dispatch: React.Dispatch<BSTOperationAction>, stateRef: RefObject<BSTOperationState>, makeComparison: (a: number, b: number) => string) {
        switch (value.type) {
            case "compare":
                dispatch({
                    type: "SET_POPUP_TEXT",
                    payload: makeComparison(value.node.value, stateRef.current.targetNumber)
                });

                dispatch({type: "SET_CHECKING_NODE", payload: value.node});
                dispatch({type: "SET_RESULT_NODE", payload: null});
                break;
            case "exists":
                dispatch({type: "SET_POPUP_TEXT", payload: `–≠–ª–µ–º–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`});
                dispatch({type: "SET_RESULT_NODE", payload: null});
                dispatch({type: "SET_CHECKING_NODE", payload: null});
                break;
            case "inserted":
                dispatch({type: "SET_POPUP_TEXT", payload: `–≠–ª–µ–º–µ–Ω—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω!`});
                dispatch({type: "SET_RESULT_NODE", payload: value.node});
                dispatch({type: "SET_CHECKING_NODE", payload: null});
                dispatch({type: "SET_BST_NODES", payload: [...stateRef.current.bstNodes, value.node]});
                break;
        }
    }

    return <BSTAlgorithm algo={bstInsert} setAlgorithmState={setAlgorithmState}
                                startBST={[node]} title="BST Insert"></BSTAlgorithm>
}

export default BSTInsert;