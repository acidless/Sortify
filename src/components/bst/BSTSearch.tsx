import {type RefObject, useContext, useEffect} from "react";
import type {BSTOperationAction, BSTOperationState} from "../../hooks/useBSTOperation.ts";
import BSTAlgorithm from "./BSTAlgorithm.tsx";
import {bstBfs, generateRandomBST} from "../../algorithms/bstUtils.ts";
import {bstSearch, type BSTSearchAction} from "../../algorithms/bstSearch.ts";
import {TheoryContext} from "../../TheoryContext.ts";
import Tabs from "../Tabs.tsx";

function BSTSearchTheory() {
    return <>
        <h3 className="mb-2">üìå –ü–æ–∏—Å–∫ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –¥–µ—Ä–µ–≤–µ –ø–æ–∏—Å–∫–∞ (Binary Search Tree, BST)</h3>
        <p className="mb-6 text-base font-light leading-6">
            –ü–æ–∏—Å–∫ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –¥–µ—Ä–µ–≤–µ –ø–æ–∏—Å–∫–∞ ‚Äî —ç—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–∑–ª–∞ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –¥–µ—Ä–µ–≤–µ, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞
            –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–∏—Å–∫–∞:
            –¥–ª—è –ª—é–±–æ–≥–æ —É–∑–ª–∞, –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ª–µ–≤–æ–º –ø–æ–¥–¥–µ—Ä–µ–≤–µ <span className="text-green-400">–º–µ–Ω—å—à–µ</span>, –∞ –≤—Å–µ
            –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–æ–º –ø–æ–¥–¥–µ—Ä–µ–≤–µ <span className="text-green-400">–±–æ–ª—å—à–µ</span> –∑–Ω–∞—á–µ–Ω–∏—è —É–∑–ª–∞.
            –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å —É–∑–ª—ã, –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É–∑–ª–∞ –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏–ª–∏ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—è—Å—å
            –≤–ª–µ–≤–æ –∏–ª–∏ –≤–ø—Ä–∞–≤–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å–∫–æ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.
        </p>

        <h4 className="mb-2 text-lg font-semibold">üëç –ü–ª—é—Å—ã –∏ üëé –ú–∏–Ω—É—Å—ã</h4>
        <ul className="list-disc list-inside text-base font-light leading-6">
            <li>–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø—Ä–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–µ—Ä–µ–≤–µ.</li>
            <li>–ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –∏–ª–∏ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è.</li>
            <li className="text-red-400">–•—É–¥—à–∏–π —Å–ª—É—á–∞–π –ø—Ä–∏ –Ω–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–µ—Ä–µ–≤–µ ‚Äî O(n).</li>
            <li className="text-red-400">–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–∏ (–µ—Å–ª–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è).
            </li>
        </ul>
    </>
}

function BSTSearchAsymptotics() {
    return <>
        <h3 className="mb-2">‚è± –°–ª–æ–∂–Ω–æ—Å—Ç—å</h3>
        <table className="mb-2 text-base font-light leading-6 text-left border-collapse">
            <thead>
            <tr>
                <th className="border-neutral-700 border-1 p-2">–°–ª—É—á–∞–π</th>
                <th className="border-neutral-700 border-1 p-2">–í—Ä–µ–º—è</th>
            </tr>
            </thead>
            <tbody>
            <tr className="bg-green-900/40">
                <td className="border-neutral-700 border-1 p-2">–õ—É—á—à–∏–π (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤)</td>
                <td className="border-neutral-700 border-1 p-2">O(1)</td>
            </tr>
            <tr className="bg-yellow-900/40">
                <td className="border-neutral-700 border-1 p-2">–°—Ä–µ–¥–Ω–∏–π</td>
                <td className="border-neutral-700 border-1 p-2">O(logn)</td>
            </tr>
            <tr className="bg-red-900/40">
                <td className="border-neutral-700 border-1 p-2">–•—É–¥—à–∏–π</td>
                <td className="border-neutral-700 border-1 p-2">O(h)</td>
            </tr>
            </tbody>
        </table>
        <p className="mb-6 text-base font-light leading-6">–ü–∞–º—è—Ç—å: O(h), –≥–¥–µ h - –≤—ã—Å–æ—Ç–∞ –¥–µ—Ä–µ–≤–∞</p>
    </>
}

function BSTSearchAlgorithm() {
    return <>
        <h3 className="mb-2">üß† –ü–æ—à–∞–≥–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ</h3>
        <ol className="list-decimal list-inside mb-6 text-base font-light leading-6">
            <li>ü´ö –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É–∑–ª–∞.</li>
            <li>üîé –°—Ä–∞–≤–Ω–∏—Ç–µ –∏—Å–∫–æ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞.</li>
            <li>‚úÖ –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, —É–∑–µ–ª –Ω–∞–π–¥–µ–Ω.</li>
            <li>‚¨ÖÔ∏è –ï—Å–ª–∏ –∏—Å–∫–æ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –ª–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ.</li>
            <li>‚û°Ô∏è –ï—Å–ª–∏ –∏—Å–∫–æ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ.</li>
            <li>üîÅ –ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ —à–∞–≥–∏ 2-5, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ—Ç–µ —É–∑–µ–ª –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç–µ –∫–æ–Ω—Ü–∞ –¥–µ—Ä–µ–≤–∞.</li>
        </ol>

        <h4 className="mb-2">üìÑ –ü—Å–µ–≤–¥–æ–∫–æ–¥</h4>
        <pre className="bg-gray-900 p-4 rounded-md text-sm font-light mb-4">
      <code>
        {`procedure searchBST(node, val)
    if node is null then
        return null
    if val == node.val then
        return node
    else if val < node.val then
        return searchBST(node.left, val)
    return searchBST(node.right, val)

procedure startSearchBST(root, val)
    return searchBST(root, val)
end procedure`}
      </code>
    </pre>
    </>
}

function BSTSearchText() {
    return <Tabs tabs={[{content: BSTSearchTheory(), name: "–¢–µ–æ—Ä–∏—è"}, {
        content: BSTSearchAsymptotics(),
        name: "–°–ª–æ–∂–Ω–æ—Å—Ç—å"
    }, {content: BSTSearchAlgorithm(), name: "–®–∞–≥–∏"}]}>
    </Tabs>
}

function BSTSearch() {
    const {setTheory} = useContext(TheoryContext);

    useEffect(() => {
        setTheory(<BSTSearchText/>);
    }, []);

    function setAlgorithmState(value: BSTSearchAction, dispatch: React.Dispatch<BSTOperationAction>, stateRef: RefObject<BSTOperationState>, makeComparison: (a: number, b: number) => string) {
        switch (value.type) {
            case "compare":
                dispatch({
                    type: "SET_POPUP_TEXT",
                    payload: makeComparison(value.node.value, stateRef.current.targetNumber)
                });
                dispatch({type: "SET_CHECKING_NODE", payload: value.node});
                dispatch({type: "SET_RESULT_NODE", payload: null});
                break;
            case "found":
                dispatch({type: "SET_POPUP_TEXT", payload: "–≠–ª–µ–º–µ–Ω—Ç –Ω–∞–∏ÃÜ–¥–µ–Ω!"});
                dispatch({type: "SET_RESULT_NODE", payload: value.node});
                dispatch({type: "SET_CHECKING_NODE", payload: null});
                break;
            case "not-found":
                dispatch({type: "SET_POPUP_TEXT", payload: "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!"});
                dispatch({type: "SET_RESULT_NODE", payload: null});
                dispatch({type: "SET_CHECKING_NODE", payload: null});
                break;
        }
    }

    return <BSTAlgorithm algo={bstSearch} setAlgorithmState={setAlgorithmState}
                         startBST={bstBfs(generateRandomBST(8, 0, 20))} title="BST Search"></BSTAlgorithm>
}

export default BSTSearch;