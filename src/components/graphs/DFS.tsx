import {type GraphTraversalAction, type GraphTraversalState} from "../../hooks/useGraphTraversal.ts";
import GraphTraversal from "./GraphTraversal.tsx";
import {dfs} from "../../algorithms/dfs.ts";
import {useContext, useEffect} from "react";
import {TheoryContext} from "../../TheoryContext.ts";

function DFSTheory() {
    return <>
        <h3 className="mb-6">üìå –ü–æ–∏—Å–∫ –≤ –≥–ª—É–±–∏–Ω—É (Depth-First Search, DFS)</h3>

        <h4 className="mb-2">üí° –ò–¥–µ—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞</h4>
        <p className="mb-6 text-base font-light leading-6">
            –ü–æ–∏—Å–∫ –≤ –≥–ª—É–±–∏–Ω—É ‚Äî —ç—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –æ–±—Ö–æ–¥–∞ –∏–ª–∏ –ø–æ–∏—Å–∫–∞ –≤ –≥—Ä–∞—Ñ–∞—Ö. –û–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç —Å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É–∑–ª–∞ (–∏–ª–∏ –ª—é–±–æ–≥–æ
            –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É–∑–ª–∞) –∏ –∏—Å—Å–ª–µ–¥—É–µ—Ç –∫–∞–∫ –º–æ–∂–Ω–æ –¥–∞–ª—å—à–µ –≤–¥–æ–ª—å –∫–∞–∂–¥–æ–≥–æ –≤–µ—Ç–≤–ª–µ–Ω–∏—è, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç—Å—Ç—É–ø–∏—Ç—å.
            –ê–ª–≥–æ—Ä–∏—Ç–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–µ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–∑–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ—Å–µ—Ç–∏—Ç—å, –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∫–∞–∫ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ,
            —Ç–∞–∫ –∏ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ.
            DFS —á–∞—Å—Ç–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è —Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º –ª–∞–±–∏—Ä–∏–Ω—Ç–∞: –≤—ã –∏–¥–µ—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É –ø—É—Ç–∏, –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç–µ –∫–æ–Ω—Ü–∞, –∞ –∑–∞—Ç–µ–º
            –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ—Å—å –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø—É—Ç–∏.
        </p>

        <h4 className="mb-2">‚è± –°–ª–æ–∂–Ω–æ—Å—Ç—å</h4>
        <table className="mb-2 text-base font-light leading-6 text-left border-collapse">
            <thead>
            <tr>
                <th className="border-neutral-700 border-1 p-2">–°–ª—É—á–∞–π</th>
                <th className="border-neutral-700 border-1 p-2">–í—Ä–µ–º—è</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td className="border-neutral-700 border-1 p-2">–•—É–¥—à–∏–π</td>
                <td className="border-neutral-700 border-1 p-2">O(V + E)</td>
            </tr>
            <tr>
                <td className="border-neutral-700 border-1 p-2">–°—Ä–µ–¥–Ω–∏–π</td>
                <td className="border-neutral-700 border-1 p-2">O(V + E)</td>
            </tr>
            <tr>
                <td className="border-neutral-700 border-1 p-2">–õ—É—á—à–∏–π</td>
                <td className="border-neutral-700 border-1 p-2">O(V + E)</td>
            </tr>
            </tbody>
        </table>
        <p className="mb-6 text-base font-light leading-6">–ü–∞–º—è—Ç—å: O(V)</p>

        <h4 className="mb-2">üß† –ü–æ—à–∞–≥–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ</h4>
        <ol className="list-decimal list-inside mb-6 text-base font-light leading-6">
            <li>–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É–∑–ª–∞ (–∏–ª–∏ –ª—é–±–æ–≥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É–∑–ª–∞).</li>
            <li>–ü–æ—Å–µ—Ç–∏—Ç–µ —É–∑–µ–ª –∏ –æ—Ç–º–µ—Ç—å—Ç–µ –µ–≥–æ –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–π.</li>
            <li>–î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–µ–ø–æ—Å–µ—â–µ–Ω–Ω–æ–≥–æ —Å–æ—Å–µ–¥–Ω–µ–≥–æ —É–∑–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ DFS.</li>
            <li>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ, –ø–æ–∫–∞ –≤—Å–µ —É–∑–ª—ã –Ω–µ –±—É–¥—É—Ç –ø–æ—Å–µ—â–µ–Ω—ã –∏–ª–∏ –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω –∏—Å–∫–æ–º—ã–π —É–∑–µ–ª.</li>
        </ol>

        <h4 className="mb-2">üìÑ –ü—Å–µ–≤–¥–æ–∫–æ–¥</h4>
        <pre className="bg-gray-900 p-4 rounded-md text-sm font-light mb-4">
      <code>
        {`procedure DFS(node, visited)
    if node is not in visited then
        add node to visited
        foreach u in node.neighbors do
            DFS(u, visited)

procedure startDFS(graph, startNode)
    visited = []
    DFS(startNode, visited)
end procedure`}
      </code>
    </pre>
    </>
}

function DFS() {
    const {setTheory} = useContext(TheoryContext);

    useEffect(() => {
        setTheory(<DFSTheory/>);
    }, []);

    function setAlgorithmState(value: any, dispatch: React.Dispatch<GraphTraversalAction>, stateRef: React.RefObject<GraphTraversalState>) {
        switch (value.type) {
            case "push":
                dispatch({
                    type: "SET_QUEUED_NODES",
                    payload: [...stateRef.current.queuedNodes, value.node],
                });
                dispatch({type: "SET_POPUP_TEXT", payload: `–ö–ª–∞–¥—ë–º ${value.node.value} –≤ —Å—Ç–µ–∫`});
                break;
            case "pop":
                dispatch({
                    type: "SET_QUEUED_NODES",
                    payload: stateRef.current.queuedNodes.filter(n => n.id !== value.node.id),
                });
                dispatch({type: "SET_POPUP_TEXT", payload: `–î–æ—Å—Ç–∞—ë–º ${value.node.value} –∏–∑ —Å—Ç–µ–∫–∞`});
                break;
            case "visit": {
                const visitedNodes = new Set(stateRef.current.visitedNodes);
                visitedNodes.add(value.node.id);
                dispatch({type: "SET_VISITED_NODES", payload: visitedNodes});
                dispatch({type: "SET_POPUP_TEXT", payload: `–ü–æ—Å–µ—â–∞–µ–º ${value.node.value}`});
                break;
            }
        }
    }

    return <GraphTraversal algorithm={dfs} setAlgorithmState={setAlgorithmState} title="DFS (Depth-first search)"/>;
}

export default DFS;
