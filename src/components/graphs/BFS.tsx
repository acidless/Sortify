import {type GraphTraversalAction, type GraphTraversalState} from "../../hooks/useGraphTraversal.ts";
import {bfs} from "../../algorithms/bfs.ts";
import GraphTraversal from "./GraphTraversal.tsx";
import { useContext, useEffect } from "react";
import {TheoryContext} from "../../TheoryContext.ts";

function BFSTheory() {
    return <>
        <h3 className="mb-6">üìå –ü–æ–∏—Å–∫ –≤ —à–∏—Ä–∏–Ω—É (Breadth-First Search, BFS)</h3>

        <h4 className="mb-2">üí° –ò–¥–µ—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞</h4>
        <p className="mb-6 text-base font-light leading-6">
            –ü–æ–∏—Å–∫ –≤ —à–∏—Ä–∏–Ω—É ‚Äî —ç—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –æ–±—Ö–æ–¥–∞ –∏–ª–∏ –ø–æ–∏—Å–∫–∞ –≤ –≥—Ä–∞—Ñ–∞—Ö, –∫–æ—Ç–æ—Ä—ã–π –∏—Å—Å–ª–µ–¥—É–µ—Ç –≤—Å–µ —Å–æ—Å–µ–¥–Ω–∏–µ —É–∑–ª—ã —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø–µ—Ä–µ–π—Ç–∏ –∫ —É–∑–ª–∞–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è.
            –ê–ª–≥–æ—Ä–∏—Ç–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–∑–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ—Å–µ—Ç–∏—Ç—å, –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —É–∑–ª—ã –±—É–¥—É—Ç –ø–æ—Å–µ—â–µ–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É–∑–ª–∞.
            BFS —á–∞—Å—Ç–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è —Å –ø–æ–∏—Å–∫–æ–º –ø–æ —ç—Ç–∞–∂–∞–º –∑–¥–∞–Ω–∏—è: –≤—ã –∏—Å—Å–ª–µ–¥—É–µ—Ç–µ –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã –Ω–∞ –æ–¥–Ω–æ–º —ç—Ç–∞–∂–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–æ–¥–Ω—è—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–∂.
        </p>

        <h4 className="mb-2">‚è± –°–ª–æ–∂–Ω–æ—Å—Ç—å</h4>
        <table className="mb-2 text-base font-light leading-6 text-left border-collapse">
            <thead>
            <tr>
                <th className="border-neutral-700 border-1 p-2">–°–ª—É—á–∞–π</th>
                <th className="border-neutral-700 border-1 p-2">–í—Ä–µ–º—è</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td className="border-neutral-700 border-1 p-2">–•—É–¥—à–∏–π</td>
                <td className="border-neutral-700 border-1 p-2">O(V + E)</td>
            </tr>
            <tr>
                <td className="border-neutral-700 border-1 p-2">–°—Ä–µ–¥–Ω–∏–π</td>
                <td className="border-neutral-700 border-1 p-2">O(V + E)</td>
            </tr>
            <tr>
                <td className="border-neutral-700 border-1 p-2">–õ—É—á—à–∏–π</td>
                <td className="border-neutral-700 border-1 p-2">O(V + E)</td>
            </tr>
            </tbody>
        </table>
        <p className="mb-6 text-base font-light leading-6">–ü–∞–º—è—Ç—å: O(V)</p>

        <h4 className="mb-2">üß† –ü–æ—à–∞–≥–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ</h4>
        <ol className="list-decimal list-inside mb-6 text-base font-light leading-6">
            <li>–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É–∑–ª–∞ (–∏–ª–∏ –ª—é–±–æ–≥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É–∑–ª–∞).</li>
            <li>–ü–æ–º–µ—Å—Ç–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π —É–∑–µ–ª –≤ –æ—á–µ—Ä–µ–¥—å –∏ –æ—Ç–º–µ—Ç—å—Ç–µ –µ–≥–æ –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–π.</li>
            <li>–ü–æ–∫–∞ –æ—á–µ—Ä–µ–¥—å –Ω–µ –ø—É—Å—Ç–∞, –∏–∑–≤–ª–µ–∫–∞–π—Ç–µ —É–∑–µ–ª –∏–∑ –æ—á–µ—Ä–µ–¥–∏.</li>
            <li>–î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–µ–ø–æ—Å–µ—â–µ–Ω–Ω–æ–≥–æ —Å–æ—Å–µ–¥–Ω–µ–≥–æ —É–∑–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥—å –∏ –æ—Ç–º–µ—Ç—å—Ç–µ –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–π.</li>
            <li>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ, –ø–æ–∫–∞ –≤—Å–µ —É–∑–ª—ã –Ω–µ –±—É–¥—É—Ç –ø–æ—Å–µ—â–µ–Ω—ã –∏–ª–∏ –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω –∏—Å–∫–æ–º—ã–π —É–∑–µ–ª.</li>
        </ol>

        <h4 className="mb-2">üìÑ –ü—Å–µ–≤–¥–æ–∫–æ–¥</h4>
        <pre className="bg-gray-900 p-4 rounded-md text-sm font-light mb-4">
      <code>
        {`procedure BFS(graph, startNode)
    queue = []
    visited = []
    enqueue(queue, startNode)
    add startNode to visited

    while queue is not empty do
        node = dequeue(queue)
        foreach u in node.neighbors do
            if u is not in visited then
                enqueue(queue, u)
                add u to visited
end procedure`}
      </code>
    </pre>
    </>
}

function BFS() {
    const {setTheory} = useContext(TheoryContext);

    useEffect(() => {
        setTheory(<BFSTheory/>);
    }, []);

    function setAlgorithmState(value: any, dispatch: React.Dispatch<GraphTraversalAction>, stateRef: React.RefObject<GraphTraversalState>) {
        switch (value.type) {
            case "enqueue":
                dispatch({
                    type: "SET_QUEUED_NODES",
                    payload: [...stateRef.current.queuedNodes, value.node],
                });
                dispatch({type: "SET_POPUP_TEXT", payload: `–î–æ–±–∞–≤–ª—è–µ–º ${value.node.value} –≤ –æ—á–µ—Ä–µ–¥—å`});
                break;
            case "visit": {
                const visitedNodes = new Set(stateRef.current.visitedNodes);
                visitedNodes.add(value.node.id);
                dispatch({type: "SET_VISITED_NODES", payload: visitedNodes});
                dispatch({type: "SET_POPUP_TEXT", payload: `–ü–æ—Å–µ—â–∞–µ–º ${value.node.value}`});
                break;
            }
        }
    }

    return <GraphTraversal algorithm={bfs} setAlgorithmState={setAlgorithmState} title="BFS (Breadth-first search)"/>;
}

export default BFS;